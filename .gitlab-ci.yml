stages:
  - prepare-environment
  - start-environment
  - install
  - unit-tests
  - integrational-tests
  - tutorial-tests
  - functional-tests
  - finish

variables:
  GIT_STRATEGY: none

cache:
  untracked: true
  paths:
    - resolve-$CI_PIPELINE_ID
    - ci-cd
    - .yarn-cache
  policy: pull

###############
# CI/CD setup #
###############

ubuntu (prepare environment):
  stage: prepare-environment
  tags:
    - ubuntu
  only:
    - ci/cd
  except:
    - triggers
  cache:
    policy: pull-push
  script:
    - rm -rf ci-cd || true
    - git clone https://github.com/reimagined/resolve.git ci-cd
    - cd ci-cd
    - git fetch origin ci/cd:ci/cd
    - git checkout ci/cd
    - yarn install --frozen-lockfile --cache-folder ../.yarn-cache

macOS (prepare environment):
  stage: prepare-environment
  tags:
    - macos
  only:
    - ci/cd
  except:
    - triggers
  cache:
    policy: pull-push
  script:
    - rm -rf ci-cd || true
    - git clone https://github.com/reimagined/resolve.git ci-cd
    - cd ci-cd
    - git fetch origin ci/cd:ci/cd
    - git checkout ci/cd
    - yarn install --frozen-lockfile --cache-folder ../.yarn-cache

windows (prepare environment):
  stage: prepare-environment
  tags:
    - windows
  only:
    - ci/cd
  except:
    - triggers
  cache:
    policy: pull-push
  script:
    - rd /S /Q ci-cd || cd .
    - git clone https://github.com/reimagined/resolve.git ci-cd
    - cd ci-cd
    - git fetch origin ci/cd:ci/cd
    - git checkout ci/cd
    - yarn install --frozen-lockfile --cache-folder ..\.yarn-cache

ubuntu (start environment):
  stage: start-environment
  tags:
    - ubuntu
  only:
    - ci/cd
  except:
    - triggers
  cache:
    policy: pull
  script:
    - cd ci-cd
    - pm2 delete trigger-on-pull-request || true
    - pm2 start trigger-on-pull-request/index.js --name trigger-on-pull-request

##################################
# pull request -> dev or release #
##################################

install (macOS):
  stage: install
  tags:
    - macos
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME =~ /^feature\/.+/
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'dev'
      - $TARGET_BRANCH_NAME =~ /^release\/.+/
  cache:
    policy: pull-push
  before_script:
    - node ci-cd/create-github-status/index.js --state pending --context "0. Pipeline" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_PIPELINE_URL
  script:
    - rm -rf resolve-$CI_PIPELINE_ID || true
    - git clone https://github.com/reimagined/resolve.git resolve-$CI_PIPELINE_ID
    - cd resolve-$CI_PIPELINE_ID
    - git fetch origin $MERGE_COMMIT_SHA:merge-commit
    - git checkout merge-commit
    - yarn install --frozen-lockfile --cache-folder ../.yarn-cache

install (Windows):
  stage: install
  tags:
    - windows
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME =~ /^feature\/.+/
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'dev'
      - $TARGET_BRANCH_NAME =~ /^release\/.+/
  cache:
    policy: pull-push
  before_script:
    - node ci-cd\create-github-status\index.js --state pending --context "0. Pipeline" --description "Waiting ♯%CI_PIPELINE_IID% for status to be reported" --targetUrl %CI_PIPELINE_URL%
  script:
    - rd /S /Q resolve-%CI_PIPELINE_ID% || cd .
    - git clone https://github.com/reimagined/resolve.git resolve-%CI_PIPELINE_ID%
    - cd resolve-%CI_PIPELINE_ID%
    - git fetch origin %MERGE_COMMIT_SHA%:merge-commit
    - git checkout merge-commit
    - yarn install --frozen-lockfile --cache-folder ..\.yarn-cache

checks (macOS):
  stage: unit-tests
  tags:
    - macos
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME =~ /^feature\/.+/
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'dev'
      - $TARGET_BRANCH_NAME =~ /^release\/.+/
  cache:
    policy: pull
  before_script:
    - node ci-cd/job-status/index.js --start
    - node ci-cd/create-github-status/index.js --state pending --context "1. Unit tests" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_JOB_URL
  script:
    - cd resolve-$CI_PIPELINE_ID/
    - if [ "$(node_modules/.bin/prettier --no-semi --single-quote --list-different "**/*.js")" ]; then exit 1; fi
    - yarn validate-lock-file
    - yarn lint
    - yarn test
    - yarn test:integrational
    - cd ..
    - node ci-cd/job-status/index.js --end
  after_script:
    - if [ "$(node ci-cd/job-status/index.js --isSucceeded)" == "true" ]; then node ci-cd/create-github-status/index.js --state success --context "1. Unit tests" --description "Build ♯$CI_PIPELINE_IID succeeded in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; else node ci-cd/create-github-status/index.js --state failure --context "1. Unit tests" --description "Build ♯$CI_PIPELINE_IID failed in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; fi

checks-lightweight (Windows):
  stage: unit-tests
  tags:
    - windows
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME =~ /^feature\/.+/
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'dev'
      - $TARGET_BRANCH_NAME =~ /^release\/.+/
  cache:
    policy: pull
  before_script:
    - node ci-cd\job-status\index.js --start
    - node ci-cd\create-github-status\index.js --state pending --context "2. Unit tests (Windows)" --description "Waiting ♯%CI_PIPELINE_IID% for status to be reported" --targetUrl %CI_JOB_URL%
  script:
    - cd resolve-%CI_PIPELINE_ID%
    - call yarn lint
    - call yarn test
    - call yarn test:integrational
    - cd ..
    - node ci-cd\job-status\index.js --end
  after_script:
    - for /f "tokens=*" %%i in ('node ci-cd\job-status\index.js --isSucceeded') do set CI_STATUS=%%i
    - if "%CI_STATUS%"=="true" (node ci-cd\create-github-status\index.js --state success --context "2. Unit tests (Windows)" --description "Build ♯%CI_PIPELINE_IID% succeeded" --targetUrl %CI_JOB_URL%) else (node ci-cd\create-github-status\index.js --state failure --context "2. Unit tests (Windows)" --description "Build ♯%CI_PIPELINE_IID% failed" --targetUrl %CI_JOB_URL%)
    - set CI_STATUS=

functional-tests:
  stage: functional-tests
  tags:
    - macos
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME =~ /^feature\/.+/
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'dev'
      - $TARGET_BRANCH_NAME =~ /^release\/.+/
  cache:
    policy: pull
  before_script:
    - node ci-cd/job-status/index.js --start
    - node ci-cd/create-github-status/index.js --state pending --context "3. Functional tests" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_JOB_URL
  script:
    - cd resolve-$CI_PIPELINE_ID/
    - yarn test:functional safari
    - cd ..
    - node ci-cd/job-status/index.js --end
  after_script:
    - if [ "$(node ci-cd/job-status/index.js --isSucceeded)" == "true" ]; then node ci-cd/create-github-status/index.js --state success --context "3. Functional tests" --description "Build ♯$CI_PIPELINE_IID succeeded in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; else node ci-cd/create-github-status/index.js --state failure --context "3. Functional tests" --description "Build ♯$CI_PIPELINE_IID failed in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; fi
    
functional-tests (Windows):
  stage: functional-tests
  tags:
    - windows
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME =~ /^feature\/.+/
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'dev'
      - $TARGET_BRANCH_NAME =~ /^release\/.+/
  cache:
    policy: pull
  before_script:
    - node ci-cd\job-status\index.js --start
    - node ci-cd\create-github-status\index.js --state pending --context "4. Functional tests (Windows)" --description "Waiting ♯%CI_PIPELINE_IID% for status to be reported" --targetUrl %CI_JOB_URL%
  script:
    - cd resolve-%CI_PIPELINE_ID%/
    - call yarn test:functional edge
    - cd ..
    - node ci-cd\job-status\index.js --end
  after_script:
    - for /f "tokens=*" %%i in ('node ci-cd\job-status\index.js --isSucceeded') do set CI_STATUS=%%i
    - if %CI_STATUS%=="true" (node ci-cd\create-github-status\index.js --state success --context "4. Functional tests (Windows)" --description "Build ♯%CI_PIPELINE_IID% succeeded" --targetUrl %CI_JOB_URL%) else (node ci-cd\create-github-status\index.js --state failure --context "4. Functional tests (Windows)" --description "Build ♯%CI_PIPELINE_IID% failed" --targetUrl %CI_JOB_URL%)
    - set CI_STATUS=

#################
# dev -> master #
#################

macOS (install):
  stage: install
  tags:
    - macos
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  cache:
    policy: pull-push
  before_script:
    - node ci-cd/create-github-status/index.js --state pending --context "0. Pipeline" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_PIPELINE_URL
  script:
    - rm -rf resolve-$CI_PIPELINE_ID || true
    - git clone https://github.com/reimagined/resolve.git resolve-$CI_PIPELINE_ID
    - cd resolve-$CI_PIPELINE_ID
    - git fetch origin $MERGE_COMMIT_SHA:merge-commit
    - git checkout merge-commit
    - yarn install --frozen-lockfile --cache-folder ../.yarn-cache
    - yarn build-packages

ubuntu (install):
  stage: install
  tags:
    - ubuntu
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  cache:
    policy: pull-push
  before_script:
    - node ci-cd/create-github-status/index.js --state pending --context "0. Pipeline" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_PIPELINE_URL
  script:
    - rm -rf resolve-$CI_PIPELINE_ID || true
    - git clone https://github.com/reimagined/resolve.git resolve-$CI_PIPELINE_ID
    - cd resolve-$CI_PIPELINE_ID
    - git fetch origin $MERGE_COMMIT_SHA:merge-commit
    - git checkout merge-commit
    - yarn install --frozen-lockfile --cache-folder ../.yarn-cache
    - yarn build-packages
    
windows (install):
  stage: install
  tags:
    - windows
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  cache:
    policy: pull-push
  before_script:
    - node ci-cd\create-github-status\index.js --state pending --context "0. Pipeline" --description "Waiting ♯%CI_PIPELINE_IID% for status to be reported" --targetUrl %CI_PIPELINE_URL%
  script:
    - rd /S /Q resolve-%CI_PIPELINE_ID% || cd .
    - git clone https://github.com/reimagined/resolve.git resolve-%CI_PIPELINE_ID%
    - cd resolve-%CI_PIPELINE_ID%
    - git fetch origin %MERGE_COMMIT_SHA%:merge-commit
    - git checkout merge-commit
    - call yarn install --frozen-lockfile --cache-folder ..\.yarn-cache
    - call yarn build-packages

eslint + prettier:
  stage: unit-tests
  tags:
    - any
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  before_script:
    - node ci-cd/job-status/index.js --start
    - node ci-cd/create-github-status/index.js --state pending --context "1. ESLint + Prettier" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_JOB_URL
  script:
    - cd resolve-$CI_PIPELINE_ID/
    - if [ "$(node_modules/.bin/prettier --no-semi --single-quote --list-different "**/*.js")" ]; then exit 1; fi
    - yarn validate-lock-file
    - yarn lint
    - cd ..
    - node ci-cd/job-status/index.js --end
  after_script:
    - if [ "$(node ci-cd/job-status/index.js --isSucceeded)" == "true" ]; then node ci-cd/create-github-status/index.js --state success --context "1. ESLint + Prettier" --description "Build ♯$CI_PIPELINE_IID succeeded in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; else node ci-cd/create-github-status/index.js --state failure --context "1. ESLint + Prettier" --description "Build ♯$CI_PIPELINE_IID failed in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; fi

eslint + prettier (Windows):
  stage: unit-tests
  tags:
    - windows
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  before_script:
    - node ci-cd\job-status\index.js --start
    - node ci-cd\create-github-status\index.js --state pending --context "2. ESLint + Prettier (Windows)" --description "Waiting ♯%CI_PIPELINE_IID% for status to be reported" --targetUrl %CI_JOB_URL%
  script:
    - cd resolve-%CI_PIPELINE_ID%/
    - for /f "tokens=*" %%i in ('node_modules\.bin\prettier --no-semi --single-quote --list-different "**/*.js"') do set PRETTIER_STATUS=%%i
    - if not "%PRETTIER_STATUS%"=="Active code page: 65001" (exit 1)
    - set PRETTIER_STATUS=
    - call yarn validate-lock-file
    - call yarn lint
    - cd ..
    - node ci-cd\job-status\index.js --end
  after_script:
    - for /f "tokens=*" %%i in ('node ci-cd\job-status\index.js --isSucceeded') do set CI_STATUS=%%i
    - if %CI_STATUS%=="true" (node ci-cd\create-github-status\index.js --state success --context "2. ESLint + Prettier (Windows)" --description "Build ♯%CI_PIPELINE_IID% succeeded" --targetUrl %CI_JOB_URL%) else (node ci-cd\create-github-status\index.js --state failure --context "2. ESLint + Prettier (Windows)" --description "Build ♯%CI_PIPELINE_IID% failed" --targetUrl %CI_JOB_URL%)
    - set CI_STATUS=
    
unit-tests:
  stage: unit-tests
  tags:
    - any
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  before_script:
    - node ci-cd/job-status/index.js --start
    - node ci-cd/create-github-status/index.js --state pending --context "3. Unit-tests" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_JOB_URL
  script:
    - cd resolve-$CI_PIPELINE_ID/
    - yarn test
    - export GITLAB_CI=
    - cd ..
    - node ci-cd/job-status/index.js --end
  after_script:
    - if [ "$(node ci-cd/job-status/index.js --isSucceeded)" == "true" ]; then node ci-cd/create-github-status/index.js --state success --context "3. Unit-tests" --description "Build ♯$CI_PIPELINE_IID succeeded in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; else node ci-cd/create-github-status/index.js --state failure --context "3. Unit-tests" --description "Build ♯$CI_PIPELINE_IID failed in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; fi
    
unit-tests (Windows):
  stage: unit-tests
  tags:
    - windows
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  before_script:
    - node ci-cd\job-status\index.js --start
    - node ci-cd\create-github-status\index.js --state pending --context "4. Unit-tests (Windows)" --description "Waiting ♯%CI_PIPELINE_IID% for status to be reported" --targetUrl %CI_JOB_URL%
  script:
    - cd resolve-%CI_PIPELINE_ID%/
    - call yarn test
    - set GITLAB_CI=
    - cd ..
    - node ci-cd\job-status\index.js --end
  after_script:
    - for /f "tokens=*" %%i in ('node ci-cd\job-status\index.js --isSucceeded') do set CI_STATUS=%%i
    - if %CI_STATUS%=="true" (node ci-cd\create-github-status\index.js --state success --context "4. Unit-tests (Windows)" --description "Build ♯%CI_PIPELINE_IID% succeeded" --targetUrl %CI_JOB_URL%) else (node ci-cd\create-github-status\index.js --state failure --context "4. Unit-tests (Windows)" --description "Build ♯%CI_PIPELINE_IID% failed" --targetUrl %CI_JOB_URL%)
    - set CI_STATUS=

integrational-tests:
  stage: integrational-tests
  tags:
    - ubuntu
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  cache:
    policy: pull
  before_script:
    - node ci-cd/job-status/index.js --start
    - node ci-cd/create-github-status/index.js --state pending --context "5. Integrational tests" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_JOB_URL
  script:
    - cd resolve-$CI_PIPELINE_ID/
    - yarn test:integrational
    - cd ..
    - node ci-cd/job-status/index.js --end
  after_script:
    - if [ "$(node ci-cd/job-status/index.js --isSucceeded)" == "true" ]; then node ci-cd/create-github-status/index.js --state success --context "5. Integrational tests" --description "Build ♯$CI_PIPELINE_IID succeeded in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; else node ci-cd/create-github-status/index.js --state failure --context "5. Integrational tests" --description "Build ♯$CI_PIPELINE_IID failed in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; fi

tutorial-tests:
  stage: tutorial-tests
  tags:
    - macos
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  cache:
    policy: pull
  before_script:
    - node ci-cd/job-status/index.js --start
    - node ci-cd/create-github-status/index.js --state pending --context "6. Tutorial. Functional tests" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_JOB_URL
  script:
    - cd resolve-$CI_PIPELINE_ID/
    - yarn tutorial-test:functional safari
    - cd ..
    - node ci-cd/job-status/index.js --end
  after_script:
    - if [ "$(node ci-cd/job-status/index.js --isSucceeded)" == "true" ]; then node ci-cd/create-github-status/index.js --state success --context "6. Tutorial. Functional tests" --description "Build ♯$CI_PIPELINE_IID succeeded in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; else node ci-cd/create-github-status/index.js --state failure --context "6. Tutorial. Functional tests" --description "Build ♯$CI_PIPELINE_IID failed in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; fi

macOS (create-resolve-app + functional-tests):
  stage: functional-tests
  tags:
    - macos
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  before_script:
    - node ci-cd/job-status/index.js --start
    - node ci-cd/create-github-status/index.js --state pending --context "7. Functional-tests (macOS)" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_JOB_URL
  script:
    - cd resolve-$CI_PIPELINE_ID
    - pm2 delete local-registry || true
    - pm2 start packages/internal/local-registry/bin/index.js --name local-registry
    - cd ..
    - sleep 3
    - rm -rf hacker-news || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e hacker-news hacker-news
    - cd hacker-news
    - yarn test:functional safari
    - cd ..
    - rm -rf hacker-news
    - rm -rf hello-world || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e hello-world hello-world
    - cd hello-world
    - yarn test:functional safari
    - cd ..
    - rm -rf hello-world
    - rm -rf shopping-list-advanced || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e shopping-list-advanced shopping-list-advanced
    - cd shopping-list-advanced
    - yarn test:functional safari
    - cd ..
    - rm -rf shopping-list-advanced
    - rm -rf shopping-list || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e shopping-list shopping-list
    - cd shopping-list
    - yarn test:functional safari
    - cd ..
    - rm -rf shopping-list
    - rm -rf with-postcss || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e with-postcss with-postcss
    - cd with-postcss
    - yarn test:functional safari
    - cd ..
    - rm -rf with-postcss
    - rm -rf with-styled-components || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e with-styled-components with-styled-components
    - cd with-styled-components
    - yarn test:functional safari
    - cd ..
    - rm -rf with-styled-components
    - node ci-cd/job-status/index.js --end
  after_script:
    - if [ "$(node ci-cd/job-status/index.js --isSucceeded)" == "true" ]; then node ci-cd/create-github-status/index.js --state success --context "7. Functional-tests (macOS)" --description "Build ♯$CI_PIPELINE_IID succeeded in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; else node ci-cd/create-github-status/index.js --state failure --context "7. Functional-tests (macOS)" --description "Build ♯$CI_PIPELINE_IID failed in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; fi
    
ubuntu (create-resolve-app + functional-tests):
  stage: functional-tests
  tags:
    - ubuntu
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  before_script:
    - node ci-cd/job-status/index.js --start
    - node ci-cd/create-github-status/index.js --state pending --context "8. Functional-tests (Ubuntu)" --description "Waiting ♯$CI_PIPELINE_IID for status to be reported" --targetUrl $CI_JOB_URL
  script:
    - cd resolve-$CI_PIPELINE_ID
    - pm2 delete local-registry || true
    - pm2 start packages/internal/local-registry/bin/index.js --name local-registry
    - cd ..
    - sleep 3
    - export DISPLAY=:0
    - rm -rf hacker-news || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e hacker-news hacker-news
    - cd hacker-news
    - yarn test:functional chromium
    - cd ..
    - rm -rf hacker-news
    - rm -rf hello-world || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e hello-world hello-world
    - cd hello-world
    - yarn test:functional chromium
    - cd ..
    - rm -rf hello-world
    - rm -rf shopping-list-advanced || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e shopping-list-advanced shopping-list-advanced
    - cd shopping-list-advanced
    - yarn test:functional chromium
    - cd ..
    - rm -rf shopping-list-advanced
    - rm -rf shopping-list || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e shopping-list shopping-list
    - cd shopping-list
    - yarn test:functional chromium
    - cd ..
    - rm -rf shopping-list
    - rm -rf with-postcss || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e with-postcss with-postcss
    - cd with-postcss
    - yarn test:functional chromium
    - cd ..
    - rm -rf with-postcss
    - rm -rf with-styled-components || true
    - node resolve-$CI_PIPELINE_ID/packages/core/create-resolve-app/bin/index.js --local-registry -c $MERGE_COMMIT_SHA -e with-styled-components with-styled-components
    - cd with-styled-components
    - yarn test:functional chromium
    - cd ..
    - rm -rf with-styled-components
    - node ci-cd/job-status/index.js --end
  after_script:
    - if [ "$(node ci-cd/job-status/index.js --isSucceeded)" == "true" ]; then node ci-cd/create-github-status/index.js --state success --context "8. Functional-tests (Ubuntu)" --description "Build ♯$CI_PIPELINE_IID succeeded in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; else node ci-cd/create-github-status/index.js --state failure --context "8. Functional-tests (Ubuntu)" --description "Build ♯$CI_PIPELINE_IID failed in $(cat ci-cd/job.time)" --targetUrl $CI_JOB_URL; fi
    
windows (create-resolve-app + functional-tests):
  stage: functional-tests
  tags:
    - windows
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  only:
    variables:
      - $SOURCE_BRANCH_NAME == 'dev'
  only:
    variables:
      - $TARGET_BRANCH_NAME == 'master'
  before_script:
    - node ci-cd\job-status\index.js --start
    - node ci-cd\create-github-status\index.js --state pending --context "9. Functional-tests (Windows)" --description "Waiting ♯%CI_PIPELINE_IID% for status to be reported" --targetUrl %CI_JOB_URL%
  script:
    - cd resolve-%CI_PIPELINE_ID%
    - pm2 delete local-registry || cd .
    - pm2 start packages\internal\local-registry\bin\index.js --name local-registry
    - cd ..
    - sleep 3
    - rd /S /Q hacker-news || cd .
    - node resolve-%CI_PIPELINE_ID%\packages\core\create-resolve-app\bin\index.js --local-registry -c %MERGE_COMMIT_SHA% -e hacker-news hacker-news
    - cd hacker-news
    - call yarn test:functional edge
    - cd ..
    - rd /S /Q hacker-news
    - rd /S /Q hello-world || cd .
    - node resolve-%CI_PIPELINE_ID$\packages\core\create-resolve-app\bin/index.js --local-registry -c %MERGE_COMMIT_SHA% -e hello-world hello-world
    - cd hello-world
    - call yarn test:functional edge
    - cd ..
    - rd /S /Q hello-world
    - rd /S /Q shopping-list-advanced || cd .
    - node resolve-%CI_PIPELINE_ID%\packages\core\create-resolve-app\bin\index.js --local-registry -c %MERGE_COMMIT_SHA% -e shopping-list-advanced shopping-list-advanced
    - cd shopping-list-advanced
    - call yarn test:functional edge
    - cd ..
    - rd /S /Q shopping-list-advanced
    - rd /S /Q shopping-list || cd .
    - node resolve-%CI_PIPELINE_ID%\packages\core\create-resolve-app\bin\index.js --local-registry -c %MERGE_COMMIT_SHA% -e shopping-list shopping-list
    - cd shopping-list
    - call yarn test:functional edge
    - cd ..
    - rd /S /Q shopping-list
    - rd /S /Q with-postcss || cd .
    - node resolve-%CI_PIPELINE_ID%\packages\core\create-resolve-app\bin\index.js --local-registry -c %MERGE_COMMIT_SHA% -e with-postcss with-postcss
    - cd with-postcss
    - call yarn test:functional edge
    - cd ..
    - rd /S /Q with-postcss
    - rd /S /Q with-styled-components || cd .
    - node resolve-%CI_PIPELINE_ID%\packages\core\create-resolve-app\bin\index.js --local-registry -c %MERGE_COMMIT_SHA% -e with-styled-components with-styled-components
    - cd with-styled-components
    - call yarn test:functional edge
    - cd ..
    - rd /S /Q with-styled-components
    - node ci-cd/job-status/index.js --end
  after_script:
    - for /f "tokens=*" %%i in ('node ci-cd\job-status\index.js --isSucceeded') do set CI_STATUS=%%i
    - if %CI_STATUS%=="true" (node ci-cd\create-github-status\index.js --state success --context "9. Functional-tests (Windows)" --description "Build ♯%CI_PIPELINE_IID% succeeded" --targetUrl %CI_JOB_URL%) else (node ci-cd\create-github-status\index.js --state failure --context "9. Functional-tests (Windows)" --description "Build ♯%CI_PIPELINE_IID% failed" --targetUrl %CI_JOB_URL%)
    - set CI_STATUS=

##########
# finish #
##########

success:
  stage: finish
  when: on_success
  tags:
    - any
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  cache:
    policy: pull
  script:
    - rm -rf resolve-$CI_PIPELINE_ID
    - node ci-cd/create-github-status/index.js --state success --context "0. Pipeline" --description "Build ♯$CI_PIPELINE_IID succeeded" --targetUrl $CI_PIPELINE_URL
    
success (Windows):
  stage: finish
  when: on_success
  tags:
    - windows
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  cache:
    policy: pull
  script:
    - rd /S /Q resolve-%CI_PIPELINE_ID%

failure:
  stage: finish
  when: on_failure
  tags:
    - any
  only:
    variables:
      - $CI_PIPELINE_TRIGGERED == 'true'
  cache:
    policy: pull
  script:
    - node ci-cd/create-github-status/index.js --state failure --context "0. Pipeline" --description "Build ♯$CI_PIPELINE_IID failed" --targetUrl $CI_PIPELINE_URL
